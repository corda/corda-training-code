buildscript {
    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    Properties nodesConfig = new Properties()
    file("$projectDir/workflows/res/tokens-workflows.conf").withInputStream { nodesConfig.load(it) }

    ext {
        app_notary = nodesConfig.getProperty("notary").replace('"', "")
        us_mint = nodesConfig.getProperty("usMint").replace('"', "")
        dmv = nodesConfig.getProperty("dmv").replace('"', "")

        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        use_kotlin = Boolean.parseBoolean(constants.getProperty("useKotlin"))
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        guava_version = constants.getProperty("guavaVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        tokens_release_version = constants.getProperty("tokensReleaseVersion")
        tokens_release_group = constants.getProperty("tokensReleaseGroup")
        confidential_id_release_version = constants.getProperty("confidentialIdReleaseVersion")
        confidential_id_release_group = constants.getProperty("confidentialIdReleaseGroup")
        accounts_release_version = constants.getProperty("accountsLibVersion")
        accounts_release_group = constants.getProperty("accountsLibReleaseGroup")
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
    }

    dependencies {
        if (use_kotlin) classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"

    }
}

allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://software.r3.com/artifactory/corda-lib' }
        maven { url 'https://software.r3.com/artifactory/corda-lib-dev' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    dependencies {
        compile "com.google.guava:guava:$guava_version"
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    test {
        maxHeapSize = '2G'
        maxParallelForks = 4
        forkEvery = 4
    }
}

if (use_kotlin) apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    if (use_kotlin) compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":contracts")
    cordapp project(":workflows")

    // Token SDK dependencies.
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-selection:$tokens_release_version"
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

cordapp {
    info {
        name "CorDapp Template"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

if (use_kotlin) tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        cordapp project(':contracts')
        cordapp (project(':workflows')) {
            config project.file("res/tokens-workflows.conf")
        }
        // Token SDK dependencies.
        cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
        cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
        cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
        cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
        cordapp "$tokens_release_group:tokens-selection:$tokens_release_version"
        cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
        cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"
    }
    node {
        name app_notary
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        projectCordapp {
            deploy = false
        }
        cordapps.clear()
    }
    node {
        name us_mint
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name dmv
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Dealer,L=Dallas,C=US"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10014
        rpcSettings {
            address("localhost:10015")
            adminAddress("localhost:10055")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10017
        rpcSettings {
            address("localhost:10018")
            adminAddress("localhost:10058")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
